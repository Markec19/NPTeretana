/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.form;

import domain.Nalog;
import controller.Controller;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Forma za kreiranje novog naloga
 * 
 * @author Luka
 */
public class FrmNapraviNalog extends javax.swing.JFrame {

    /**
     * Creates new form FrmNapraviNalog
     */
    public FrmNapraviNalog() {
        initComponents();
        setLocationRelativeTo(null);
        //JOptionPane.showMessageDialog(this, "Sistem je kreirao nalog");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        txtKorisnikoIme = new javax.swing.JTextField();
        txtSifra = new javax.swing.JTextField();
        btnPotvrdi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Unesite ime:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Unesite prezime:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Unesite korisničko ime:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Unesite šifru:");
        jLabel4.setAutoscrolls(true);

        txtIme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtPrezime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtKorisnikoIme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtSifra.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnPotvrdi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPotvrdi.setText("Potvrdi");
        btnPotvrdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPotvrdiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSifra, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKorisnikoIme, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPotvrdi, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKorisnikoIme, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSifra, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(btnPotvrdi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPotvrdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPotvrdiActionPerformed
        try {
            Nalog n = kreirajNalog();
            if(n != null){
                zapamtiNalog(n);
                (new FrmLogin()).setVisible(true);
                this.dispose();
            }else{
                JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti nalog");
            }
        } catch (Exception ex) {
            Logger.getLogger(FrmNapraviNalog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPotvrdiActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPotvrdi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKorisnikoIme;
    private javax.swing.JTextField txtPrezime;
    private javax.swing.JTextField txtSifra;
    // End of variables declaration//GEN-END:variables

    /**
     * Vraca nalog koji je kreiran
     * 
     * @return nalog koji je kreiran
     */
    private Nalog kreirajNalog() {
        try {
            //Nalog n = Controller.getInstance().kreirajNalog();
            Nalog n = new Nalog();
            
            String ime = txtIme.getText();
            String prezime = txtPrezime.getText();
            String korIme = txtKorisnikoIme.getText();
            String sifra = txtSifra.getText();
            
            if(provera(ime, prezime, korIme, sifra)){
                n.setIme(ime);
                n.setPrezime(prezime);
                n.setKorisnickoIme(korIme);
                n.setSifra(sifra);
                
                JOptionPane.showMessageDialog(this, "Sistem je kreirao nalog");
                
                return n;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da kreira nalog");
            Logger.getLogger(FrmNapraviNalog.class.getName()).log(Level.SEVERE, null, ex);            
        }
        
        return null;
    }

    /**
     * Vrsi proveru da li su u formu ispravno uneti podaci
     * @param ime ime korisnika
     * @param prezime prezime korisnika
     * @param korIme korisnicko ime naloga
     * @param sifra sifra naloga
     * @return da li su podaci ispravno uneti
     * @throws Exception 
     */
    private boolean provera(String ime, String prezime, String korIme, String sifra) throws Exception {
        if(ime.length() > 30){
            JOptionPane.showMessageDialog(this, "Ime ne može da ima više od 30 slova");
            return false;
        }
        if(prezime.length() > 30){
            JOptionPane.showMessageDialog(this, "Prezime ne može da ima više od 30 slova");
            return false;
        }
        if(korIme.length() > 30){
            JOptionPane.showMessageDialog(this, "Korisničko ime ne može da ima više od 30 slova");
            return false;
        }
        if(sifra.length() > 20 || sifra.length() < 7){
            JOptionPane.showMessageDialog(this, "Šifra mora imati između 7 i 20 karaktera");
            return false;
        }
        if(korisnickoImePostoji(korIme)){
            JOptionPane.showMessageDialog(this, "Uneto korisničko ime već posotji");
            return false;
        }
        return true;
    }

    /**
     * Proverava da li vec postoji nalog sa istim korisnickim imenom
     * 
     * @param korIme korisnicko ime naloga
     * @return da li vec postoji nalog sa istim korisnickim imenom
     * @throws Exception 
     */
    private boolean korisnickoImePostoji(String korIme) throws Exception {
        List<Nalog> list = vratiListuNaloga();
        for (int i = 0; i < list.size(); i++)
            if(korIme.equals(list.get(i).getKorisnickoIme()))
                return true;
        return false;
    }

    /**
     * Vraca listu svih naloga
     * 
     * @return lista svih naloga
     * @throws Exception 
     */
    private List<Nalog> vratiListuNaloga() throws Exception {
        return Controller.getInstance().vratiSveNaloge();
    }

    /**
     * Pamti nalog u bazi podataka
     * 
     * @param n nalog
     * @throws Exception 
     */
    private void zapamtiNalog(Nalog n) throws Exception {
        Controller.getInstance().zapamtiNalog(n);
        JOptionPane.showMessageDialog(this, "Sistem je zapamtio nalog");
    }
}
